{"version":3,"file":"corrections.js","sources":["webpack:///webpack/bootstrap 87432b2b488e9ba6ffd4?5056","webpack:///corrections/corrections.js","webpack:///js/fill-details.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 87432b2b488e9ba6ffd4","import {fillDetailsPanel} from '../js/fill-details';\n\nfunction getCookie(name) {\n  const b = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n  return b ? b.pop() : '';\n}\n\nfunction getParameterByName(name) {\n  const url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\nconst numCompleted = Number(getParameterByName('num') || '0');\nif (numCompleted === 1) {\n  $('.popup').show();\n}\n\nconst id = getParameterByName('id');\nconst dataPromise = $.get(`/api/layer/oldtoronto/${id}`);\n\nconst target = getParameterByName('target');\nif (target) {\n  $('form').attr('target', target);\n}\n\nfunction initMap() {\n  let initLatLng;\n\n  const geocoder = new google.maps.Geocoder();\n  var map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: 43.652505, lng: -79.384424},\n    zoom: 13\n  });\n  window.map = map;  // for debugging\n  var marker = null;\n  var card = document.getElementById('pac-card');\n  var input = document.getElementById('pac-input');\n\n  function updateHiddenFieldWithLatLng(latLng) {\n    if (latLng.equals(initLatLng)) {\n      $('#submit').text('Location is correct');\n      $('#reset').hide();\n    } else {\n      $('#submit').text('Submit correction');\n      $('#reset').show();\n    }\n\n    $('#lat').val(latLng.lat());\n    $('#lng').val(latLng.lng());\n  }\n\n  function setMarkerLatLng(latLng) {\n    marker.setPosition(latLng);\n    marker.setMap(map);\n    updateHiddenFieldWithLatLng(latLng);\n  }\n\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);\n\n  var autocomplete = new google.maps.places.Autocomplete(input);\n\n  google.maps.event.addDomListener(input, 'keydown', function(event) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n    }\n  });\n\n  // Bind the map's bounds (viewport) property to the autocomplete object,\n  // so that the autocomplete requests use the current map bounds for the\n  // bounds option in the request.\n  autocomplete.bindTo('bounds', map);\n\n  marker = new google.maps.Marker({\n    map: null,  // Hidden initially\n    position: map.getCenter(),\n    draggable: true,\n    animation: google.maps.Animation.DROP\n  });\n\n  google.maps.event.addListener(marker, 'dragend', function() {\n    updateHiddenFieldWithLatLng(marker.getPosition());\n    $('#method').val('drag');\n    $('#last-search').val('');\n  });\n\n  map.addListener('click', function(e) {\n    setMarkerLatLng(e.latLng);\n    $('#method').val('map-click');\n  });\n\n  autocomplete.addListener('place_changed', function() {\n    var place = autocomplete.getPlace();\n    if (!place.geometry) {\n      // User entered the name of a Place that was not suggested and\n      // pressed the Enter key, or the Place Details request failed.\n      geocoder.geocode({\n        address: place.name,\n        componentRestrictions: {\n          country: 'CA',\n          administrativeArea: 'ON',\n          locality: 'Toronto'\n        }\n      }, function(results, status) {\n        console.log(status, results);\n        const geometry = results[0].geometry;\n        if (geometry) {\n          setMarkerLatLng(geometry.location);\n          map.fitBounds(geometry.viewport);\n          $('#method').val('search');\n          $('#last-search').val(place.name);\n        }\n      });\n      return;\n    }\n\n    // If the place has a geometry, then present it on a map.\n    if (place.geometry.viewport) {\n      map.fitBounds(place.geometry.viewport);\n    } else {\n      map.setCenter(place.geometry.location);\n      map.setZoom(17);  // Why 17? Because it looks good.\n    }\n    setMarkerLatLng(place.geometry.location);\n    $('#method').val('search');\n    $('#last-search').val(place.name);\n  });\n\n  dataPromise.done(feature => {\n    const [lng, lat] = feature.geometry.coordinates;\n    const {properties} = feature;\n    const {image} = properties;\n\n    const $pane = $('.inputside');\n    fillDetailsPanel(feature.id, properties, $pane);\n\n    $pane.find('a img').attr('src', image.url);\n    $('#photo-id').val(feature.id);\n\n    $('#loading').hide();\n    $('.container').show();\n\n    const latLng = new google.maps.LatLng(lat, lng);\n    initLatLng = latLng;\n    $('#init-lat').val(lat);\n    $('#init-lng').val(lng);\n    setMarkerLatLng(latLng);\n    map.setCenter(latLng);\n    map.setZoom(15);\n  });\n\n  $('#reset').on('click', () => {\n    setMarkerLatLng(initLatLng);\n  });\n}\n\n$('button[type=\"submit\"]').on('click', function() {\n  $('#outcome').val($(this).text());  // record which button was clicked.\n  $('#user-cookie').val(getCookie('_gid'));\n  // do validation here.\n});\n\n$('form').on('submit', function() {\n  const next = getParameterByName('next');  // 'random' is default; could be 'location'\n\n  let newId;\n  if (next === 'location') {\n    // Pick the next image from this location.\n    const idNum = Number(id);\n    for (const ll in ll_to_ids) {\n      const ids = ll_to_ids[ll];\n      const idx = ids.indexOf(idNum);\n      if (idx >= 0) {\n        newId = ids[(idx + 1) % ids.length];\n        break;\n      }\n    }\n  } else {\n    // Pick a random image from a random location.\n    // This is deliberately _not_ a uniform sample of photos. We want location coverage.\n    const locs = Object.keys(ll_to_ids);\n    const loc = locs[Math.floor(Math.random() * locs.length)];\n    const idsForLoc = ll_to_ids[loc];\n    newId = idsForLoc[Math.floor(Math.random() * idsForLoc.length)];\n  }\n  const params = {\n    id: newId,\n    num: numCompleted + 1\n  };\n  if (next) {\n    params.next = next;\n  }\n  if (target) {\n    params.target = target;\n  }\n\n  // Wait 100ms to make sure the form submission goes through.\n  window.setTimeout(function() {\n    document.location.search = '?' + $.param(params);\n  }, 100);\n});\n\nwindow.initMap = initMap;  // Move into the global scope for gmaps.\n\n\n\n// WEBPACK FOOTER //\n// corrections/corrections.js","// This module allows both the photo viewer and corrections UI to share logic.\n\n// See get_source_properties in generate_geojson.py\nconst ALL_FIELDS = [\n  'date',  // Both\n  'physical_desc', 'citation', 'condition', 'scope',  // Toronto Archives\n  'creator', 'description', 'subject' // TPL\n];\n\nexport function fillDetailsPanel(photoId, info, $pane) {\n  const {archives_fields, geocode, url, tpl_fields} = info;\n\n  $pane.find('a.link').attr('href', url);\n  $pane.find('a.link.source')\n    .text(tpl_fields ? 'Toronto Public Library' : 'City of Toronto Archives');\n  $pane.find('a.feedback-button').attr('href', `/corrections/?id=${photoId}`);\n\n  const fields = archives_fields || tpl_fields;\n\n  for (const k of ALL_FIELDS) {\n    const v = fields[k];\n    if (v) {\n      $pane.find(`.${k}`).show();\n      $pane.find(`.value.${k}, a.${k}`).text(v || '');\n    } else {\n      $pane.find(`.${k}`).hide();  // hide both key & value if value is missing.\n    }\n  }\n\n  $pane.find('.title').text(info.title);\n  $pane.find('.geocode-debug').text(JSON.stringify(geocode, null, 2));\n}\n\n\n\n// WEBPACK FOOTER //\n// js/fill-details.js"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpMA;AATA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAUA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;;;;","sourceRoot":""}